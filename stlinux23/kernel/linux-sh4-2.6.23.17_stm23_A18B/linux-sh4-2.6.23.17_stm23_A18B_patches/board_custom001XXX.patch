--- arch/sh/Kconfig.orig	2009-04-08 23:41:54.000000000 +0200
+++ arch/sh/Kconfig	2009-04-08 23:42:43.000000000 +0200
@@ -622,6 +622,33 @@
 	  STi7141-MBOARD, ST board ID: mb628e). More information at:
 	  <http://www.stlinux.com/boards/mb628e/>
 
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001019 support
+config SH_ST_CUSTOM001019
+	bool "custom001019: STx7109 board"
+	depends on CPU_SUBTYPE_STB7100
+	help
+	  Select CUSTOM001019 Board
+
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001034 support
+config SH_ST_CUSTOM001034
+	bool "custom001034: STx7141 board"
+	depends on CPU_SUBTYPE_STX7141
+	help
+	  Select STx7141 Mboard if configuring for an
+	  STMicroelectronics STx7141 MBoard (product code:
+	  STi7141-MBOARD, ST board ID: custom001034). More information at:
+	  <http://www.stlinux.com/boards/mb628/>
+
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001035 support
+config SH_ST_CUSTOM001035
+	bool "custom001035: STx7141 board"
+	depends on CPU_SUBTYPE_STX7141
+	help
+	  Select STx7141 Mboard if configuring for an
+	  STMicroelectronics STx7141 MBoard (product code:
+	  STi7141-MBOARD, ST board ID: custom001035). More information at:
+	  <http://www.stlinux.com/boards/mb628/>
+
 config SH_ST_MB671
 	bool "mb671: STx7200 cut 2.0 Mboard"
 	depends on CPU_SUBTYPE_STX7200
--- arch/sh/Makefile.orig	2009-04-08 23:42:05.000000000 +0200
+++ arch/sh/Makefile	2009-04-08 23:43:01.000000000 +0200
@@ -161,6 +161,12 @@
 machdir-$(CONFIG_SH_MTV7109_7109)		+= st/mtv7109
 # STSDK - FAE/STAPIREF_COMPAT - Add MB628E board configuration
 machdir-$(CONFIG_SH_ST_MB628E)			+= st/mb628e st/common
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001019 board configuration
+machdir-$(CONFIG_SH_ST_CUSTOM001019)   += st/custom001019
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001034 board configuration
+machdir-$(CONFIG_SH_ST_CUSTOM001034)  	+= st/custom001034
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001035 board configuration
+machdir-$(CONFIG_SH_ST_CUSTOM001035)  	+= st/custom001035
 
 incdir-y	:= $(notdir $(firstword $(machdir-y)))
 
--- drivers/leds/Makefile.orig	2009-04-08 23:49:42.000000000 +0200
+++ drivers/leds/Makefile	2009-04-08 23:49:55.000000000 +0200
@@ -22,6 +22,12 @@
 obj-$(CONFIG_SH_ST_MB628)		+= leds-mb628.o
 # STSDK - FAE/STAPIREF_COMPAT - Add MB628E board configuration
 obj-$(CONFIG_SH_ST_MB628E)		+= leds-mb628.o
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001019 board configuration
+obj-$(CONFIG_SH_ST_CUSTOM001019) += leds-custom001019.o
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001034 board configuration
+obj-$(CONFIG_SH_ST_CUSTOM001034) += leds-custom001034.o
+# STSDK - FAE/STAPIREF_COMPAT - Add CUSTOM001035 board configuration
+obj-$(CONFIG_SH_ST_CUSTOM001035) += leds-custom001035.o
 
 # LED Triggers
 obj-$(CONFIG_LEDS_TRIGGER_TIMER)	+= ledtrig-timer.o
--- drivers/leds/leds-custom001034.orig	1970-01-01 01:00:00.000000000 +0100
+++ drivers/leds/leds-custom001034.c	2009-04-08 23:51:53.000000000 +0200
@@ -0,0 +1,46 @@
+/*
+ * linux/drivers/leds/leds-custom001034.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/leds.h>
+#include <linux/io.h>
+#include "../../arch/sh/boards/st/common/common.h"
+
+static void custom001034_led_set(struct led_classdev *led_cdev,
+			  enum led_brightness brightness)
+{
+}
+
+static struct led_classdev custom001034_led = {
+	.name = "custom001034-led",
+	.brightness_set = custom001034_led_set,
+	.default_trigger = "heartbeat"
+};
+
+static int __init custom001034_led_init(void)
+{
+	led_classdev_register(NULL, &custom001034_led);
+}
+
+static void __exit custom001034_led_exit(void)
+{
+	led_classdev_unregister(&custom001034_led);
+}
+
+module_init(custom001034_led_init);
+module_exit(custom001034_led_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("LED support for STMicroelectronics custom001034");
+MODULE_AUTHOR("Stuart Menefy <stuart.menefy@st.com>");
--- include/asm-sh/custom001019/coproc.h.orig	1970-01-01 01:00:00.000000000 +0100
+++ include/asm-sh/custom001019/coproc.h	2009-04-08 14:19:54.000000000 +0200
@@ -0,0 +1,13 @@
+/* ------------------------------------------------------------------------
+ *
+ *  HW dependent actions: CUSTOM001019 platform
+ */
+
+#define N_COPROC        2
+
+#define COPR_RAM_START	 	0x4000000	/* ST231 LMI RAM base address */
+
+#define SYSCON_REGS_BASE        P2SEGADDR(0x19001000)
+#define SYSCFG_09		(SYSCON_REGS_BASE + 0x124)
+#define SYSCFG_BOOT_REG(x)	(SYSCON_REGS_BASE + (x ? 0x168 : 0x170))
+#define SYSCFG_RESET_REG(x)	(SYSCON_REGS_BASE + (x ? 0x16c : 0x174))
--- drivers/leds/leds-custom001019.orig	1970-01-01 01:00:00.000000000 +0100
+++ drivers/leds/leds-custom001019.c	2009-04-08 14:19:54.000000000 +0200
@@ -0,0 +1,54 @@
+/*
+ * linux/drivers/leds/leds-custom001019.c
+ *
+ * Copyright (C) 2007 STMicroelectronics Limited
+ * Author: Marc Chappellier <marc.chappellier@st.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/leds.h>
+#include <asm/io.h>
+#include <linux/stm/pio.h>
+
+static struct stpio_pin *ledpio;
+
+static void custom001019_led_set(struct led_classdev *led_cdev, enum led_brightness brightness)
+{
+ if (brightness)
+  stpio_set_pin(ledpio,1);
+ else
+  stpio_set_pin(ledpio,0);
+}
+
+static struct led_classdev custom001019_led = {
+	.name = "custom001019-led",
+	.brightness_set = custom001019_led_set,
+	.default_trigger = "heartbeat"
+};
+
+static int __init custom001019_led_init(void)
+{
+    ledpio = stpio_request_pin(1,2, "LED", STPIO_OUT);
+	led_classdev_register(NULL, &custom001019_led);
+    return(0);
+}
+
+static void __exit custom001019_led_exit(void)
+{
+	stpio_free_pin(ledpio);
+	led_classdev_unregister(&custom001019_led);
+}
+
+module_init(custom001019_led_init);
+module_exit(custom001019_led_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("LED support for STMicroelectronics custom001019");
+MODULE_AUTHOR("Marc Chappellier <marc.chappellier@st.com>");
--- arch/sh/boards/st/custom001019/mach.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ arch/sh/boards/st/custom001019/mach.c	2009-04-08 14:19:54.000000000 +0200
@@ -0,0 +1,60 @@
+/*
+ * arch/sh/boards/st/custom001019/mach.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Marc Chappellier (marc.chappellier@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Machine vector for the STMicroelectronics STb7100 Reference board.
+ */
+
+#include <linux/init.h>
+#include <linux/irq.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <asm/machvec.h>
+#include <asm/irq-stb7100.h>
+
+static void __iomem *custom001019_ioport_map(unsigned long port, unsigned int size)
+{
+#ifdef CONFIG_BLK_DEV_ST40IDE
+	/*
+	 * The IDE driver appears to use memory addresses with IO port
+	 * calls. This needs fixing.
+	 */
+	return (void __iomem *)port;
+#endif
+
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init custom001019_init_irq(void)
+{
+	/* enable individual interrupt mode for externals */
+	plat_irq_setup_pins(IRQ_MODE_IRQ);
+
+	/* Set the ILC to route external interrupts to the the INTC */
+	/* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
+	/* Inputs sys-irq2 and 3 are unused (pulled high) */
+	ilc_route_external(ILC_EXT_IRQ0, 4, 0);		/* SMC Ethernet */
+	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* ATA */
+	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* Unused */
+	ilc_route_external(ILC_EXT_MDINT, 7, 0);	/* STe100 PHY */
+}
+
+void __init custom001019_setup(char**);
+
+static struct sh_machine_vector mv_custom001019 __initmv = {
+	.mv_name		= "STb7100 Reference board",
+	.mv_setup		= custom001019_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= custom001019_init_irq,
+	.mv_ioport_map		= custom001019_ioport_map,
+};
--- arch/sh/boards/st/custom001019/setup.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ arch/sh/boards/st/custom001019/setup.c	2009-04-08 14:19:54.000000000 +0200
@@ -0,0 +1,172 @@
+/*
+ * arch/sh/boards/st/custom001019/setup.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Marc Chappellier (marc.chappellier@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STb7100 Reference board support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/soc.h>
+#include <linux/spi/spi.h>
+#include <linux/delay.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/phy.h>
+#include <linux/lirc.h>
+#include <asm/irl.h>
+
+static int ascs[1] __initdata = { 3 | (STASC_FLAG_NORTSCTS << 8) };
+
+void __init custom001019_setup(char** cmdline_p)
+{
+	printk("STMicroelectronics STb7100 Reference board initialisation\n");
+
+	stx7100_early_device_init();
+	stb7100_configure_asc(ascs, 1, 0);
+}
+
+static struct plat_stm_pwm_data pwm_private_info = {
+	.flags		= PLAT_STM_PWM_OUT0,
+};
+
+static struct plat_ssc_data ssc_private_info = {
+	.capability  =
+		ssc0_has(SSC_I2C_CAPABILITY) |
+		ssc1_has(SSC_SPI_CAPABILITY) |
+		ssc2_has(SSC_I2C_CAPABILITY),
+};
+
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00100000,
+		.offset = 0x00040000,
+	}, {
+		.name = "Root FS",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0x00140000,
+	}
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+
+static struct resource physmap_flash_resource = {
+	.start		= 0x00000000,
+	.end		= 0x02000000 - 1,
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.dev		= {
+		.platform_data	= &physmap_flash_data,
+	},
+	.num_resources	= 1,
+	.resource	= &physmap_flash_resource,
+};
+
+static struct stpio_pin *phy_reset_pin;
+
+static int custom001019_phy_reset(void* bus)
+{
+	stpio_set_pin(phy_reset_pin, 1);
+	udelay(1);
+	stpio_set_pin(phy_reset_pin, 0);
+	udelay(1);
+	stpio_set_pin(phy_reset_pin, 1);
+
+	return 1;
+}
+
+static struct plat_stmmacphy_data phy_private_data = {
+	.bus_id = 0,
+	.phy_addr = -1,
+	.phy_mask = 1,
+	.interface = PHY_INTERFACE_MODE_MII,
+	.phy_reset = &custom001019_phy_reset,
+};
+
+static struct platform_device custom001019_phy_device = {
+	.name		= "stmmacphy",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+                {
+			.name	= "phyirq",
+			.start	= IRL3_IRQ,
+			.end	= IRL3_IRQ,
+			.flags	= IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &phy_private_data,
+	 }
+};
+
+static struct platform_device *custom001019_devices[] __initdata = {
+	&physmap_flash,
+	&custom001019_phy_device,
+};
+
+/* Configuration based on Futarque-RC signals train. */
+lirc_scd_t lirc_scd = {
+	.code = 0x3FFFC028,
+	.codelen = 0x1e,
+	.alt_codelen = 0,
+	.nomtime = 0x1f4,
+	.noiserecov = 0,
+};
+
+static int __init device_init(void)
+{
+	stx7100_configure_sata();
+	stx7100_configure_pwm(&pwm_private_info);
+	stx7100_configure_ssc(&ssc_private_info);
+	stx7100_configure_usb();
+	stx7100_configure_lirc(&lirc_scd);
+
+    {
+    struct stpio_pin *pin;    
+    /* Power-on tuner */    
+    pin = stpio_request_set_pin(2, 3, "demod_rst" , STPIO_OUT , 1);
+    stpio_free_pin(pin);
+    pin = stpio_request_set_pin(5, 3, "tuner_rst" , STPIO_OUT , 1);
+    stpio_free_pin(pin);
+    /* Power-on sata */    
+    pin = stpio_request_set_pin(2, 4, "sata_rst"  , STPIO_OUT , 1);
+    stpio_free_pin(pin);
+    /* Power-on usb */    
+    pin = stpio_request_set_pin(1, 5, "usb_rst"   , STPIO_OUT , 1);
+    stpio_free_pin(pin);
+    pin = stpio_request_set_pin(2, 5, "usb_rst"   , STPIO_OUT , 1);
+    stpio_free_pin(pin);
+    }
+
+	phy_reset_pin = stpio_request_set_pin(2, 2, "lan8700_rst",
+					      STPIO_OUT, 1);
+
+	stx7100_configure_ethernet(0, 0, 0);
+
+	return platform_add_devices(custom001019_devices,
+				    ARRAY_SIZE(custom001019_devices));
+}
+
+device_initcall(device_init);
--- arch/sh/boards/st/custom001019/Makefile.orig	1970-01-01 01:00:00.000000000 +0100
+++ arch/sh/boards/st/custom001019/Makefile	2009-04-08 14:19:54.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for CUSTOM001019 board
+#
+
+obj-y := setup.o mach.o
--- arch/sh/boards/st/custom001034/Makefile.orig	1970-01-01 01:00:00.000000000 +0100
+++ arch/sh/boards/st/custom001034/Makefile	2009-04-08 14:25:04.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics STx7141 Mboard (custom001034) board
+#
+
+obj-y := setup.o
--- arch/sh/boards/st/custom001034/setup.c.orig	2009-07-28 17:12:59.000000000 +0200
+++ arch/sh/boards/st/custom001034/setup.c	2009-07-29 15:29:33.000000000 +0200
@@ -0,0 +1,308 @@
+/*
+ * arch/sh/boards/st/custom001034/setup.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STx7141 Mboard support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/soc.h>
+#include <linux/workqueue.h>
+#include <linux/stm/emi.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_bitbang.h>
+#include <linux/spi/flash.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/phy.h>
+#include <linux/lirc.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <sound/stm.h>
+#include "../common/common.h"
+
+#define FLASH_NOR
+
+
+static int ascs[] __initdata = {
+	2 | (ASC2_PIO6  << 8)	/* PIO6 muxed with TS(NIM) and OOB_??? */
+};
+
+
+static void __init custom001034_setup(char **cmdline_p)
+{
+	u8 test;
+
+	printk(KERN_INFO "STMicroelectronics STx7141 Mboard initialisation\n");
+
+	stx7141_early_device_init();
+	stx7141_configure_asc(ascs, ARRAY_SIZE(ascs), 0);
+
+}
+
+static struct plat_stm_pwm_data pwm_private_info = {
+	.flags		= PLAT_STM_PWM_OUT1,
+};
+
+static struct plat_ssc_data ssc_private_info = {
+	.capability  =
+		ssc0_has(SSC_UNCONFIGURED)	/* SSC1 */	|
+		ssc1_has(SSC_UNCONFIGURED)	/* SSC2 */	|
+		ssc2_has(SSC_UNCONFIGURED)	/* SSC3 */	|
+		ssc3_has(SSC_I2C_CAPABILITY)	/* SSC4 */	|
+		ssc4_has(SSC_I2C_CAPABILITY)	/* SSC5 */	|
+		ssc5_has(SSC_I2C_CAPABILITY)	/* SSC6 */	|
+		ssc6_has(SSC_I2C_CAPABILITY),	/* SSC7 */
+};
+
+#ifdef FLASH_NOR
+/* J69 must be in position 2-3 to enable the on-board Flash devices (both
+ * NOR and NAND) rather than STEM). */
+/* J89 and J84 must be both in position 1-2 to avoid shorting A15 */
+/* J70 must be in the 2-3 position to enable NOR Flash */
+
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00100000,
+		.offset = 0x00040000,
+	}, {
+		.name = "Root FS",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0x00140000,
+	}
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,
+			.end		= 32*1024*1024 - 1,
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+	.dev		= {
+		.platform_data	= &physmap_flash_data,
+	},
+};
+
+#else
+
+/* J70 must be in the 1-2 position to enable NAND Flash */
+static struct mtd_partition nand_partitions[] = {
+	{
+		.name	= "NAND root",
+		.offset	= 0,
+		.size 	= 0x00800000
+	}, {
+		.name	= "NAND home",
+		.offset	= MTDPART_OFS_APPEND,
+		.size	= MTDPART_SIZ_FULL
+	},
+};
+
+static struct nand_config_data custom001034_nand_config = {
+	.emi_bank		= 0,
+	.emi_withinbankoffset	= 0,
+
+	/* Timings for NAND512W3A */
+	.emi_timing_data = &(struct emi_timing_data) {
+		.rd_cycle_time	= 40,		 /* times in ns */
+		.rd_oee_start	= 0,
+		.rd_oee_end	= 10,
+		.rd_latchpoint	= 10,
+		.busreleasetime = 0,
+
+		.wr_cycle_time	= 40,
+		.wr_oee_start	= 0,
+		.wr_oee_end	= 10,
+
+		.wait_active_low = 0,
+	},
+
+	.chip_delay		= 40,		/* time in us */
+	.mtd_parts		= nand_partitions,
+	.nr_parts		= ARRAY_SIZE(nand_partitions),
+};
+#endif
+
+static int custom001034_phy_reset(void *bus)
+{
+	return 1;
+}
+
+static struct plat_stmmacphy_data phy_private_data = {
+	.bus_id = 0,
+	.phy_addr = 31,
+	.phy_mask = 0,
+	.interface = PHY_INTERFACE_MODE_MII,
+	.phy_reset = custom001034_phy_reset,
+};
+
+static struct platform_device smsc8700_phy_device = {
+	.name		= "stmmacphy",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.name	= "phyirq",
+			.start	= -1,/*FIXME*/
+			.end	= -1,
+			.flags	= IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &phy_private_data,
+	}
+};
+
+
+static struct platform_device *custom001034_devices[] __initdata = {
+	&physmap_flash,
+	&smsc8700_phy_device,
+};
+
+/* Configuration based on Futarque-RC signals train. */
+lirc_scd_t lirc_scd = {
+	.code = 0x3FFFC028,
+	.codelen = 0x1e,
+	.alt_codelen = 0,
+	.nomtime = 0x1f4,
+	.noiserecov = 0,
+};
+
+static int __init device_init(void)
+{
+	/*
+	 * Can't enable PWM output without conflicting with either
+	 * SSC6 (audio) or USB1A OC (which is disabled because it is broken,
+	 * but would still result in contention).
+	 *
+	 * stx7141_configure_pwm(&pwm_private_info);
+	 */
+	stx7141_configure_ssc(&ssc_private_info);
+	stx7141_configure_usb(0);
+
+	/* This requires fitting jumpers J52A 1-2 and J52B 4-5 */
+	/* STSDK - FAE/STAPIREF_COMPAT - Remove this usb to have QAM working */
+	/* stx7141_configure_usb(1); */
+
+	if (cpu_data->cut_major > 1) {
+
+		/* Moved this under cut2 or more since on cut1 OC protection was disabled */
+		/* and it was causing tuner failure problem on cut1,                      */
+		/* therefore, we used to comment this cut1 in IP partition patch          */
+		/* This requires fitting jumpers J52A 1-2 and J52B 4-5                    */
+		stx7141_configure_usb(1); 
+		
+		/*As per Sti7141 S/W Arc doc v0.5.0==>both USB1.1 given to eCM*/
+		/* stx7141_configure_usb(2); */
+		/* stx7141_configure_usb(3); */
+
+		stx7141_configure_sata();
+	}
+    {
+	struct stpio_pin *pin; 
+#if 0 /* GMAC 0 dedicated to eCM */
+	pin=stpio_request_set_pin(9,4, "PHY_RESET_94",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(9,5, "PHY_RESET_95",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(10,7, "PHY_RESET_107",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+#endif
+	pin=stpio_request_set_pin(11,6,"PHY_RESET_116",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,1,"PHY_RESET_131",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,2,"PHY_RESET_132",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,3,"PHY_RESET_133",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,4,"PHY_RESET_134",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,5,"PHY_RESET_135",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,2,"PHY_RESET_142",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,3,"PHY_RESET_143",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,4,"PHY_RESET_144",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,5,"PHY_RESET_145",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(16,6,"PHY_RESET_166",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(11,3,"PHY_RESET_113",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	mdelay(100);
+	pin=stpio_request_set_pin(11,3,"PHY_RESET_113",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	mdelay(100);
+	}
+
+	stx7141_configure_ethernet(1, 0, 0, 0);
+#if 0
+	stx7141_configure_lirc(&lirc_scd);
+#endif
+
+#ifndef FLASH_NOR
+	stx7141_configure_nand(&custom001034_nand_config);
+	/* The MTD NAND code doesn't understand the concept of VPP,
+	 * (or hardware write protect) so permanently enable it.
+	 */
+#endif
+
+	return platform_add_devices(custom001034_devices, ARRAY_SIZE(custom001034_devices));
+}
+arch_initcall(device_init);
+
+static void __iomem *custom001034_ioport_map(unsigned long port, unsigned int size)
+{
+	/*
+	 * No IO ports on this device, but to allow safe probing pick
+	 * somewhere safe to redirect all reads and writes.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init custom001034_init_irq(void)
+{
+}
+
+struct sh_machine_vector mv_custom001034 __initmv = {
+	.mv_name		= "custom001034",
+	.mv_setup		= custom001034_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= custom001034_init_irq,
+	.mv_ioport_map		= custom001034_ioport_map,
+};
+
+
+
--- drivers/leds/leds-custom001035.orig	1970-01-01 01:00:00.000000000 +0100
+++ drivers/leds/leds-custom001035.c	2009-04-08 23:51:33.000000000 +0200
@@ -0,0 +1,46 @@
+/*
+ * linux/drivers/leds/leds-custom001035.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy <stuart.menefy@st.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/leds.h>
+#include <linux/io.h>
+#include "../../arch/sh/boards/st/common/common.h"
+
+static void custom001035_led_set(struct led_classdev *led_cdev,
+			  enum led_brightness brightness)
+{
+}
+
+static struct led_classdev custom001035_led = {
+	.name = "custom001035-led",
+	.brightness_set = custom001035_led_set,
+	.default_trigger = "heartbeat"
+};
+
+static int __init custom001035_led_init(void)
+{
+	led_classdev_register(NULL, &custom001035_led);
+}
+
+static void __exit custom001035_led_exit(void)
+{
+	led_classdev_unregister(&custom001035_led);
+}
+
+module_init(custom001035_led_init);
+module_exit(custom001035_led_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("LED support for STMicroelectronics custom001035");
+MODULE_AUTHOR("Stuart Menefy <stuart.menefy@st.com>");
--- arch/sh/boards/st/custom001035/Makefile.orig	1970-01-01 01:00:00.000000000 +0100
+++ arch/sh/boards/st/custom001035/Makefile	2009-04-08 14:39:03.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics STx7141 Mboard (custom001035) board
+#
+
+obj-y := setup.o
--- arch/sh/boards/st/custom001035/setup.c.orig	2009-07-28 17:12:59.000000000 +0200
+++ arch/sh/boards/st/custom001035/setup.c	2009-07-29 15:29:53.000000000 +0200
@@ -0,0 +1,309 @@
+/*
+ * arch/sh/boards/st/custom001035/setup.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STx7141 Mboard support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/soc.h>
+#include <linux/workqueue.h>
+#include <linux/stm/emi.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_bitbang.h>
+#include <linux/spi/flash.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/phy.h>
+#include <linux/lirc.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#include <linux/delay.h>
+#include <linux/io.h>
+#include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <sound/stm.h>
+#include "../common/common.h"
+
+#define FLASH_NOR
+
+
+static int ascs[] __initdata = {
+	1 | (ASC1_PIO10  << 8)	/* PIO6 muxed with TS(NIM) and OOB_??? */
+};
+
+
+static void __init custom001035_setup(char **cmdline_p)
+{
+	u8 test;
+
+	printk(KERN_INFO "STMicroelectronics STx7141 Mboard initialisation\n");
+
+	stx7141_early_device_init();
+	stx7141_configure_asc(ascs, ARRAY_SIZE(ascs), 0);
+
+}
+
+static struct plat_stm_pwm_data pwm_private_info = {
+	.flags		= PLAT_STM_PWM_OUT1,
+};
+
+static struct plat_ssc_data ssc_private_info = {
+	.capability  =
+		ssc0_has(SSC_UNCONFIGURED)	/* SSC1 */	|
+		ssc1_has(SSC_UNCONFIGURED)	/* SSC2 */	|
+		ssc2_has(SSC_UNCONFIGURED)	/* SSC3 */	|
+		ssc3_has(SSC_I2C_CAPABILITY)	/* SSC4 */	|
+		ssc4_has(SSC_I2C_CAPABILITY)	/* SSC5 */	|
+		ssc5_has(SSC_I2C_CAPABILITY)	/* SSC6 */	|
+		ssc6_has(SSC_I2C_CAPABILITY),	/* SSC7 */
+};
+
+#ifdef FLASH_NOR
+/* J69 must be in position 2-3 to enable the on-board Flash devices (both
+ * NOR and NAND) rather than STEM). */
+/* J89 and J84 must be both in position 1-2 to avoid shorting A15 */
+/* J70 must be in the 2-3 position to enable NOR Flash */
+
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00100000,
+		.offset = 0x00040000,
+	}, {
+		.name = "Root FS",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0x00140000,
+	}
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,
+			.end		= 32*1024*1024 - 1,
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+	.dev		= {
+		.platform_data	= &physmap_flash_data,
+	},
+};
+
+#else
+
+/* J70 must be in the 1-2 position to enable NAND Flash */
+static struct mtd_partition nand_partitions[] = {
+	{
+		.name	= "NAND root",
+		.offset	= 0,
+		.size 	= 0x00800000
+	}, {
+		.name	= "NAND home",
+		.offset	= MTDPART_OFS_APPEND,
+		.size	= MTDPART_SIZ_FULL
+	},
+};
+
+static struct nand_config_data custom001035_nand_config = {
+	.emi_bank		= 0,
+	.emi_withinbankoffset	= 0,
+
+	/* Timings for NAND512W3A */
+	.emi_timing_data = &(struct emi_timing_data) {
+		.rd_cycle_time	= 40,		 /* times in ns */
+		.rd_oee_start	= 0,
+		.rd_oee_end	= 10,
+		.rd_latchpoint	= 10,
+		.busreleasetime = 0,
+
+		.wr_cycle_time	= 40,
+		.wr_oee_start	= 0,
+		.wr_oee_end	= 10,
+
+		.wait_active_low = 0,
+	},
+
+	.chip_delay		= 40,		/* time in us */
+	.mtd_parts		= nand_partitions,
+	.nr_parts		= ARRAY_SIZE(nand_partitions),
+};
+#endif
+
+static int custom001035_phy_reset(void *bus)
+{
+	return 1;
+}
+
+static struct plat_stmmacphy_data phy_private_data = {
+	.bus_id = 0,
+	.phy_addr = 31,
+	.phy_mask = 0,
+	.interface = PHY_INTERFACE_MODE_MII,
+	.phy_reset = custom001035_phy_reset,
+};
+
+static struct platform_device smsc8700_phy_device = {
+	.name		= "stmmacphy",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.name	= "phyirq",
+			.start	= -1,/*FIXME*/
+			.end	= -1,
+			.flags	= IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &phy_private_data,
+	}
+};
+
+
+static struct platform_device *custom001035_devices[] __initdata = {
+	&physmap_flash,
+	&smsc8700_phy_device,
+};
+
+/* Configuration based on Futarque-RC signals train. */
+lirc_scd_t lirc_scd = {
+	.code = 0x3FFFC028,
+	.codelen = 0x1e,
+	.alt_codelen = 0,
+	.nomtime = 0x1f4,
+	.noiserecov = 0,
+};
+
+static int __init device_init(void)
+{
+	/*
+	 * Can't enable PWM output without conflicting with either
+	 * SSC6 (audio) or USB1A OC (which is disabled because it is broken,
+	 * but would still result in contention).
+	 *
+	 * stx7141_configure_pwm(&pwm_private_info);
+	 */
+	stx7141_configure_ssc(&ssc_private_info);
+	stx7141_configure_usb(0);
+
+	/* This requires fitting jumpers J52A 1-2 and J52B 4-5 */
+	/* STSDK - FAE/STAPIREF_COMPAT - Remove this usb to have QAM working */
+	/* stx7141_configure_usb(1); */
+
+	if (cpu_data->cut_major > 1) {
+
+		/* Moved this under cut2 or more since on cut1 OC protection was disabled */
+		/* and it was causing tuner failure problem on cut1,                      */
+		/* therefore, we used to comment this cut1 in IP partition patch          */
+		/* This requires fitting jumpers J52A 1-2 and J52B 4-5                    */
+		stx7141_configure_usb(1); 
+		
+		/*As per Sti7141 S/W Arc doc v0.5.0==>both USB1.1 given to eCM*/
+		/* stx7141_configure_usb(2); */
+		/* stx7141_configure_usb(3); */
+
+		stx7141_configure_sata();
+	}
+
+    {
+	struct stpio_pin *pin; 
+#if 0 /* GMAC 0 dedicated to eCM */
+	pin=stpio_request_set_pin(9,4, "PHY_RESET_94",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(9,5, "PHY_RESET_95",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(10,7, "PHY_RESET_107",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+#endif
+	pin=stpio_request_set_pin(11,6,"PHY_RESET_116",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,1,"PHY_RESET_131",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,2,"PHY_RESET_132",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,3,"PHY_RESET_133",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,4,"PHY_RESET_134",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(13,5,"PHY_RESET_135",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,2,"PHY_RESET_142",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,3,"PHY_RESET_143",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,4,"PHY_RESET_144",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(14,5,"PHY_RESET_145",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(16,6,"PHY_RESET_166",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	pin=stpio_request_set_pin(11,3,"PHY_RESET_113",STPIO_OUT, 0);
+	stpio_free_pin(pin);
+	mdelay(100);
+	pin=stpio_request_set_pin(11,3,"PHY_RESET_113",STPIO_OUT, 1);
+	stpio_free_pin(pin);
+	mdelay(100);
+	}
+
+	stx7141_configure_ethernet(1, 0, 0, 0);
+#if 0
+	stx7141_configure_lirc(&lirc_scd);
+#endif
+
+#ifndef FLASH_NOR
+	stx7141_configure_nand(&custom001035_nand_config);
+	/* The MTD NAND code doesn't understand the concept of VPP,
+	 * (or hardware write protect) so permanently enable it.
+	 */
+#endif
+
+	return platform_add_devices(custom001035_devices, ARRAY_SIZE(custom001035_devices));
+}
+arch_initcall(device_init);
+
+static void __iomem *custom001035_ioport_map(unsigned long port, unsigned int size)
+{
+	/*
+	 * No IO ports on this device, but to allow safe probing pick
+	 * somewhere safe to redirect all reads and writes.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init custom001035_init_irq(void)
+{
+}
+
+struct sh_machine_vector mv_custom001035 __initmv = {
+	.mv_name		= "custom001035",
+	.mv_setup		= custom001035_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= custom001035_init_irq,
+	.mv_ioport_map		= custom001035_ioport_map,
+};
+
+
+
