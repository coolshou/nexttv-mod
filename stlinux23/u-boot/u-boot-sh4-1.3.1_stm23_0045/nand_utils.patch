--- u-boot-sh4-1.3.1_stm23_0045/drivers/mtd/nand/nand_util.c	2007-12-06 17:21:19.000000000 +0800
+++ u-boot-sh4-1.3.1_stm23_0045/drivers/mtd/nand/nand_util.c	2009-11-18 09:34:10.000000000 +0800
@@ -346,6 +346,10 @@
 	if (opts->forcejffs2 || opts->forceyaffs) {
 		struct nand_oobinfo *oobsel =
 			opts->forcejffs2 ? &jffs2_oobinfo : &yaffs_oobinfo;
+	#ifdef CFG_NAND_YAFFS1_NEW_OOB_LAYOUT
+		/* jffs2_oobinfo matches 2.6.18+ MTD nand_oob_16 ecclayout */
+		oobsel = &jffs2_oobinfo;
+	#endif
 
 		if (meminfo->oobsize == 8) {
 			if (opts->forceyaffs) {
@@ -447,6 +451,28 @@
 			memcpy(oob_buf, buffer, meminfo->oobsize);
 			buffer += meminfo->oobsize;
 
+			if (opts->forceyaffs) {
+			#ifdef CFG_NAND_YAFFS1_NEW_OOB_LAYOUT
+				/* translate OOB for yaffs1 on Linux 2.6.18+ */
+				oob_buf[15] = oob_buf[12];
+				oob_buf[14] = oob_buf[11];
+				oob_buf[13] = (oob_buf[7] & 0x3f)
+					| (oob_buf[5] == 'Y' ? 0 : 0x80)
+					| (oob_buf[4] == 0 ? 0 : 0x40);
+				oob_buf[12] = oob_buf[6];
+				oob_buf[11] = oob_buf[3];
+				oob_buf[10] = oob_buf[2];
+				oob_buf[9]  = oob_buf[1];
+				oob_buf[8]  = oob_buf[0];
+				memset(oob_buf, 0xff, 8);
+			#else
+				/* set the ECC bytes to 0xff so MTD will
+				   calculate it */
+				int i;
+				for (i = 0; i < meminfo->oobinfo.eccbytes; i++)
+					oob_buf[meminfo->oobinfo.eccpos[i]] = 0xff;
+			#endif
+			}
 			/* write OOB data first, as ecc will be placed
 			 * in there*/
 			result = meminfo->write_oob(meminfo,

